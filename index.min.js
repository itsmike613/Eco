const eco={get(r){try{const t=JSON.parse(localStorage.getItem(r));return null===t?0:t}catch(t){return console.error(`Error getting key '${r}':`,t),0}},set(r,t){try{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),localStorage.setItem(r,JSON.stringify(t))}catch(t){console.error(`Error setting key '${r}':`,t)}},add(r,t){try{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.set(r,this.get(r)+t)}catch(t){console.error(`Error adding to key '${r}':`,t)}},sub(r,t){try{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.set(r,Math.max(0,this.get(r)-t))}catch(t){console.error(`Error subtracting from key '${r}':`,t)}},del(r){try{localStorage.removeItem(r)}catch(t){console.error(`Error deleting key '${r}':`,t)}},res(){try{localStorage.clear()}catch(r){console.error("Error resetting localStorage:",r)}},randomize:(r,t)=>Math.floor(Math.random()*(t-r+1))+r,mul(r,t){try{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.set(r,this.get(r)*t)}catch(t){console.error(`Error multiplying key '${r}':`,t)}},div(r,t){try{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.set(r,Math.max(0,this.get(r)/t))}catch(t){console.error(`Error dividing key '${r}':`,t)}},batchSet(r){try{r.forEach((({key:r,value:t})=>{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.set(r,t)}))}catch(r){console.error("Error batch setting:",r)}},batchAdd(r){try{r.forEach((({key:r,value:t})=>{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.add(r,t)}))}catch(r){console.error("Error batch adding:",r)}},batchSub(r){try{r.forEach((({key:r,value:t})=>{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.sub(r,t)}))}catch(r){console.error("Error batch subtracting:",r)}},batchMul(r){try{r.forEach((({key:r,value:t})=>{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.mul(r,t)}))}catch(r){console.error("Error batch multiplying:",r)}},batchDiv(r){try{r.forEach((({key:r,value:t})=>{"object"==typeof t&&void 0!==t.min&&void 0!==t.max&&(t=this.randomize(t.min,t.max)),this.div(r,t)}))}catch(r){console.error("Error batch dividing:",r)}},batchDel(r){try{r.forEach((r=>this.del(r)))}catch(r){console.error("Error batch deleting:",r)}},batchGet(r){try{return r.reduce(((r,t)=>(r[t]=this.get(t),r)),{})}catch(r){return console.error("Error batch getting:",r),{}}}};